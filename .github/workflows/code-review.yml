name: Advanced Code Quality Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  quality-checks:
    runs-on: ubuntu-latest

    steps:
      # 1️⃣ Checkout repo
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2️⃣ Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      # 3️⃣ Install dependencies
      - name: Install dependencies
        run: npm ci || npm install

      # 4️⃣ Type check (if project uses TypeScript or checkJs)
      - name: Run TypeScript type check
        run: |
          if [ -f "tsconfig.json" ]; then
            echo "Running TypeScript type check..."
            npx tsc --noEmit
          else
            echo "No tsconfig.json found, skipping type check."
          fi

      # 5️⃣ Prettier formatting check
      - name: Check code formatting with Prettier
        run: |
          echo "Checking code formatting..."
          npx prettier --check "**/*.{js,jsx,ts,tsx,json,css,md}" || (
            echo "❌ Formatting issues detected! Please run: npx prettier --write ." && exit 1
          )

      # 6️⃣ Linting with ESLint
      - name: Run ESLint analysis
        run: |
          echo "Running ESLint..."
          npm run lint --if-present

      # 7️⃣ Run tests with coverage enforcement
      - name: Run Jest tests with coverage gate
        env:
          CI: true
        run: |
          echo "Running Jest tests..."
          npm test -- --coverage --coverageThreshold='{"global":{"branches":80,"functions":80,"lines":80,"statements":80}}'

      # 8️⃣ Run security audit (fail on high or critical)
      - name: Run security vulnerability scan
        run: |
          echo "Running npm audit..."
          npm audit --audit-level=high

      # 9️⃣ Dependency review (PRs only)
      - name: Dependency change review
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: high
          comment-summary-in-pr: true

      # 🔟 Optional static security linting (if eslint-plugin-security installed)
      - name: Security static analysis (optional)
        run: |
          if npm ls eslint-plugin-security > /dev/null 2>&1; then
            echo "Running ESLint security plugin..."
            npx eslint . --ext .js,.ts --plugin security
          else
            echo "eslint-plugin-security not found, skipping static security scan."
          fi
